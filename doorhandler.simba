

{$DEFINE WL_DOORHANDLER_INCLUDED}
{$IFNDEF SRL_OSR}
  {$I SRL-T/osr.simba}
{$ENDIF}
{$IFNDEF WL_OSR}
  {$I WaspLib/osr.simba}
{$ENDIF}


type
  ERSDoor = (
    FALADOR_COW_PEN_NORTH_GATE,
    LUMBRIDGE_EAST_CHICKEN_PEN_EAST_GATE
  );

  TRSDoor = record(TSRLBaseRecord) class var
    ClosedPoints: TPointArray;
    OpenPoints: TPointArray;
    ClosedUpText: String;
    OpenUpText: String;
    DoorColor: TCTS2Color;
    Colors: Array of TCTS2Color;
    DoorHeight: Int32;
  end;

  TDoorHandler = record(TSRLBaseRecord)
    RSW: TRSWalker;
  end;


function GetRSDoor(RSDoorEnum: ERSDoor): TRSDoor; static;
var
  RSDoor: TRSDoor;
begin
  case RSDoorEnum of
    FALADOR_COW_PEN_NORTH_GATE:
    begin
      RSDoor.DoorColor := CTS2(6387845, 10);
      RSDoor.Colors := [CTS2(6387845, 10), CTS2(2768199, 10)];
      RSDoor.DoorHeight := 2;
      RSDoor.ClosedPoints := [Point(7520, 3196), Point(7516, 3192)];
      RSDoor.OpenPoints := [Point(7516, 3192), Point(7512, 3188)];
      RSDoor.ClosedUpText := "Open Gate";
      RSDoor.OpenUpText := "Close Gate";
    end;
    LUMBRIDGE_EAST_CHICKEN_PEN_EAST_GATE:
    begin
      // TODO
    end;
  end;

  Exit(RSDoor);
end;


procedure TDoorHandler.Setup();
begin
  Self.Name := 'Door Handler';
  Self.RSW.Setup('world');
end;


procedure TDoorHandler.Setup(RSWalker: TRSWalker); overload;
begin
  Self.Name := 'Door Handler';
  Self.RSW := RSWalker;
end;


function TDoorHandler.GetDoorMSPos(RSDoor: TRSDoor; OpenPosition: Boolean): TPoint;
var
  Point1MSMean: TPoint;
  Point2MSMean: TPoint;
  DoorMS: TPoint;
begin
  if OpenPosition then
  begin
    Point1MSMean := Self.RSW.GetTileMS(RSDoor.OpenPoints[0], RSDoor.DoorHeight).Mean();
    Point2MSMean := Self.RSW.GetTileMS(RSDoor.OpenPoints[1], RSDoor.DoorHeight).Mean();
  end else
  begin
    Point1MSMean := Self.RSW.GetTileMS(RSDoor.ClosedPoints[0], RSDoor.DoorHeight).Mean();
    Point2MSMean := Self.RSW.GetTileMS(RSDoor.ClosedPoints[1], RSDoor.DoorHeight).Mean();
  end;
  DoorMS := Point(Round((Point1MSMean.X + Point2MSMean.X) / 2), Round((Point1MSMean.Y + Point2MSMean.Y) / 2));
  Exit(DoorMS);
end;


function TDoorHandler.Find(RSDoor: TRSDoor; OpenPosition: Boolean): Boolean;
  function GetObjPt: TPoint;
  var
    B: TBox;
    i: Int32;
    DoorMSPos: TPoint;
    ATPA: T2DPointArray;
    Finder: TRSObjectFinder;
  begin
    for i:=0 to High(RSDoor.Colors) do
      Finder.Colors += RSDoor.Colors[i];

    Finder.ClusterDistance := 10;

    DoorMSPos := Self.GetDoorMSPos(RSDoor, OpenPosition);
    B := Box(DoorMSPos.x - 10, DoorMSPos.y - 10, DoorMSPos.x + 10, DoorMSPos.y + 10);

    B.LimitTo(MainScreen.Bounds);
    if MainScreen.IsVisible(B.Middle()) then
    begin
      ATPA := MainScreen.FindObject(Finder, B);
      if (ATPA.Len > 0) then
        Result := ATPA.Biggest().Mean();
    end;
  end;

var
  Pt: TPoint;
begin
  Result := False;

  if Inventory.GetSelectedSlot >= 0 then
    ChooseOption.Select('Cancel');

  Pt := GetObjPt;
  if Pt.X<5 then Exit;

  Mouse.Move(Pt);
  if OpenPosition then Result := MainScreen.IsUpText(RSDoor.OpenUpText, 75)
  else Result := MainScreen.IsUpText(RSDoor.ClosedUpText, 75);
end;


function TDoorHandler.IsOpen(RSDoor: TRSDoor): Boolean;
begin
  Self.Find(RSDoor, True);
  if MainScreen.IsUpText(RSDoor.OpenUpText) then Exit(True);
end;


function TDoorHandler.IsClosed(RSDoor: TRSDoor): Boolean;
begin
  Self.Find(RSDoor, False);
  if MainScreen.IsUpText(RSDoor.ClosedUpText) then Exit(True);
end;


function TDoorHandler.Open(RSDoor: TRSDoor): Boolean;
begin
  Self.Find(RSDoor, False);

  if MainScreen.IsUpText(RSDoor.ClosedUpText) then
  begin
    Mouse.Click(MOUSE_LEFT);
    if Result := MainScreen.DidRedClick() then
      WaitUntil(not Self.IsClosed(RSDoor), 500, 3000);
    Exit(Result);
  end;
end;


function TDoorHandler.Close(RSDoor: TRSDoor): Boolean;
begin
  Self.Find(RSDoor, True);

  if MainScreen.IsUpText(RSDoor.OpenUpText) then
  begin
    Mouse.Click(MOUSE_LEFT);
    if Result := MainScreen.DidRedClick() then
      WaitUntil(not Self.IsOpen(RSDoor), 500, 3000);
    Exit(Result);
  end;
end;













